#!/usr/bin/env python
# -*- coding: utf-8 -*-

import falcon
import json

from app.hook.common import api_key, authenticate, parse_request_body
from app.service import BookingServiceFactory, BookingHistoryServiceFactory
from app import log
from app import config
from app.service.booking import AbstractStateHandler
from app.model import Booking as BookingModel, User, Vehicle
from app.utils import calculate_feedback

logger = log.get_logger()


class Booking(object):
    @falcon.before(api_key)
    @falcon.before(authenticate)
    @falcon.before(parse_request_body)
    def on_post(self, req, resp, user_id, vehicle_id):
        """
        request:
            POST /v1/booking/{user_id}/{vehicle_id}
            -d '{"reserved_date_time": {"from":timestamp, "to":timestamp}}'
        response:
            200 with booking_id
        :param req:
        :param resp:
        :param user_id:
        :param vehicle_id:
        :return:
        """
        # check if user_id match with auth user
        current_auth_user_info = req.context['auth_user']
        if user_id != current_auth_user_info['user_id']:
            raise falcon.HTTPBadRequest(
                title="Forbidden",
                description="User with id {} "
                            "is not allow to "
                            "perform this action".format(user_id)
            )

        data = req.params.get('body')
        try:
            service_type = data.get('service_type')
            dt_range_from = data.get('from')
            dt_range_to = data.get('to')
            total_price = data.get('total_price')
            state_handler = BookingServiceFactory.create_state_handler(
                service_type,
                AbstractStateHandler.BOOKING_PHASE_INITIALIZED
            )
            booking = state_handler.handle(
                user_id=user_id,
                vehicle_id=vehicle_id,
                dt_range_from=dt_range_from,
                dt_range_to=dt_range_to,
                total_price=total_price
            )
        except Exception as e:
            logger.exception(e)
            raise falcon.HTTPBadRequest(
                title="Bad Request",
                description=str(e)
            )
        # todo send email to car owner or push notification
        resp.status = falcon.HTTP_200
        # todo add after hook to serialize
        resp.body = json.dumps({
            'status': 'success',
            'message': 'Booking number #{} initialized'. format(
                booking.short_id
            ),
            'data': {'booking': json.loads(booking.to_json())}
        })

    @falcon.before(api_key)
    @falcon.before(authenticate)
    @falcon.before(parse_request_body)
    def on_put(self, req, resp, booking_id):
        """
        /v1/user/booking/{booking_id}
        :param req:
        :param resp:
        :param booking_id: booking_id is short_id - not id generated by mongo
        :return:
        """
        data = req.params.get('body')
        if ('service_type' not in data) or ('status' not in data):
            raise falcon.HTTPBadRequest(
                title="Invalid Data",
                description="Body data must contains service_type "
                            "and status"
            )
        if data.get('status') ==\
                AbstractStateHandler.BOOKING_PHASE_INITIALIZED:
            raise falcon.HTTPBadRequest(
                title="Bad Request",
                description="Please use POST method to book"
            )

        req_user_id = req.context['auth_user']['user_id']

        try:
            service_type = data.get('service_type')
            status = data.get('status')
            state_handler = BookingServiceFactory.create_state_handler(
                service_type,
                status
            )
            booking = state_handler.handle(
                booking_id=booking_id,
                status=status,
                req_user_id=req_user_id
            )
        except Exception as e:
            logger.exception(e)
            raise falcon.HTTPBadRequest(
                title="Bad Request",
                description=str(e)
            )
        # todo add after hook to serialize
        resp.body = json.dumps({
            'status': 'success',
            'message': 'Booking number {} status updated'. format(booking.id),
            'data': {'booking': json.loads(booking.to_json())}
        })

    @falcon.before(api_key)
    @falcon.before(authenticate)
    def on_get(self, req, resp, user_type):
        """
        List all booking history of current user
        GET /v1/booking/history/{user_type}
        :param req:
        :param resp:
        :param user_type:
        :return:
        """
        booking_history_service = BookingHistoryServiceFactory. \
            create_booking_history_service(user_type)
        history = booking_history_service.get(req)
        total = history.count()

        resp.body = json.dumps({
            'status': 'success',
            'data': {
                'total': total,
                'history': json.loads(history.to_json())
            }
        })


class UserInfo(object):
    @falcon.before(api_key)
    @falcon.before(authenticate)
    def on_get(self, req, resp, user_type, short_booking_id, user_id):
        """
        GET /v1/booking/info/{user_type}/{short_booking_id}/{user_id}

        :param req:
        :param resp:
        :param user_type:
        :param short_booking_id:
        :param user_id:
        :return:
        """
        if user_type == config.RENTER:
            logger.info("current user is an owner that view one renter info")

            owner_id = req.context['auth_user']['user_id']
            renter_id = user_id
            renter_info = self.view_renter_booking_info(
                short_booking_id,
                renter_id,
                owner_id
            )

            total_rating, total_comments, rating =\
                calculate_feedback(renter_info)
            feedback_summary = dict()
            feedback_summary['rating'] = rating
            feedback_summary['total_rating'] = total_rating
            feedback_summary['total_comments'] = total_comments

            total_booking = BookingModel.objects(renter=renter_id).count()

            resp.body = json.dumps({
                'status': 'success',
                'data': {
                    'renter': json.loads(renter_info.to_json()),
                    'renter_feedback_summary': feedback_summary,
                    'renter_booking_summary': {
                        'total_booking': total_booking
                    }
                }
            })

        if user_type == config.OWNER:
            logger.info("current user is a renter that view an owner info")

            renter_id = req.context['auth_user']['user_id']
            owner_id = user_id
            owner_info, vehicle_info = self.view_owner_booking_info(
                short_booking_id,
                renter_id,
                owner_id
            )
            resp.body = json.dumps({
                'status': 'success',
                'data': {
                    'owner': json.loads(owner_info.to_json()),
                    'vehicle': json.loads(vehicle_info.to_json())
                }
            })

    def view_owner_booking_info(self,
                                short_booking_id,
                                renter_id,
                                owner_id):
        """
        view renter booking info
        :param short_booking_id: booking id or order id in short
        :param renter_id: renter id
        :param owner_id: vehicle owner
        :return:
        """
        # check if current_user (owner) can view renter id
        # in there is an booking with owner and renter

        booking = BookingModel.objects(short_id=short_booking_id).first()
        if owner_id != booking.owner or renter_id != booking.renter:
            raise Exception("Renter {} can't view info of this owner {}".
                            format(renter_id, owner_id))

        owner_info = User.objects(id=owner_id). \
            only(
            'avatar',
            'name',
            'email',
            'id_number',
            'phone_number',
            'created_date'
        ).first()

        vehicle_info = Vehicle.objects(id=booking.vehicle['id']).\
            only('license_plate', 'address', 'feedbacks')

        return owner_info, vehicle_info

    def view_renter_booking_info(self,
                                 short_booking_id,
                                 renter_id,
                                 owner_id):
        """
        view renter booking info
        :param short_booking_id: booking id or order id in short
        :param renter_id: renter id
        :param owner_id: vehicle owner
        :return:
        """
        # check if current_user (owner) can view renter id
        # in there is an booking with owner and renter

        booking = BookingModel.objects(short_id=short_booking_id).first()

        if not isinstance(booking, BookingModel):
            raise Exception("Can't find booking id {}".format(short_booking_id))

        if owner_id != booking.owner or renter_id != booking.renter:
            raise Exception("Owner {} can't view info of this renter {}".
                            format(owner_id, renter_id))

        renter_info = User.objects(id=renter_id).\
            only(
                'avatar',
                'name',
                'email',
                'id_number',
                'phone_number',
                'id_number_images',
                'created_date',
                'feedbacks'
            ).first()

        return renter_info
